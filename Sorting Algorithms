class Soloutions:
    #BUBBLE SORT
    def BubbleSort(self, nums):
        for i in range(len(nums)):
            isSorted = True
            for j in range(1, len(nums)-i):
                isSorted = True
                if nums[j] < nums[j-1]:
                    self.Swap(nums, j, j-1)
                    isSorted = False
            if isSorted == True:
                return
        return nums


    def Swap(self, nums, index1, index2):
        tempVal = nums[index1]
        nums[index1] = nums[index2]
        nums[index2] = tempVal

    
    #SELECTION SORT
    def SelectionSort(self, nums):
        for i in range(len(nums)):
            MinValIndex = i
            for j in range(i, len(nums)):
                if nums[j] < nums[MinValIndex]:
                    # temp = nums[j]
                    # nums[j] = nums[MinValIndex]
                    # nums[MinValIndex] = temp
                    self.Swap(nums, MinValIndex, j)
        return nums


    #INSERTION SORT
    def InsertionSort(self, nums):
        for i in range(1, len(nums)):
            val = nums[i]
            j = i-1
            while j >= 0 and nums[j] > val:
                nums[j+1] = nums[j]
                j -= 1
            nums[j+1] = val
        return nums

class MergeSort:
    def Sort(self, array):
        if len(nums) < 2:
            return 
        midindex = len(array)//2
        self.left = array[: midindex]
        self.right = array[midindex: ]

        self.Sort(self.left)
        self.Sort(self.right)

        self._MergeSort(array, left, right,)




    def _MergeSort(array, left, right):
        midindex = len(nums)/2
        i = j = k = 0
        while i in range(len(left)) and j in range(len(right)):
            if left[i] < right[j]:
                array[k] = left[i]
                i +=1
            else:
                array[k] = right[j]
                j +=1
            k += 1
            
        while i < len(left):
            array[k] = left[i]
            i += 1
            k +=1

        while j < len(right):
            array[k] = right[j]
            j += 1
            k +=1



class QuickSort:

    def sort(array, start, end):
        QuickSort._sort(array, start, end)

    def _sort(array, start, end):
        if start >= end:
            return
        boundary = QuickSort._partition(array, start, end)
        QuickSort._sort(array, start, boundary-1)
        QuickSort._sort(array, boundary+1, end)

    def _partition(array, start, end):
        i = start
        boundary = start - 1
        pivot = end
        while i < end:
            if array[i] < array[pivot]:
                boundary += 1
                QuickSort.swap(array, i, boundary)
            i += 1
        boundary += 1
        QuickSort.swap(array, pivot, boundary)
        return boundary

    def swap(nums, index1, index2):
        tempVal = nums[index1]
        nums[index1] = nums[index2]
        nums[index2] = tempVal
